function  lookupTable2022(x,y)  {

    if (y == 2023) {
      z1 = lookupTable2023(x);
      return z1;
     }
  if (y == 2024) {
      z1 = lookupTable2024(x);
      return z1;
     }
  if (y == 2025) {
      z1 = lookupTable2025(x);
      return z1;
     }
  if (y > 2025 || y < 2022) {
      z1 = [" 0 00 0000 "];
      return [z1,z1,z1,z1,z1,z1,z1];
     }
  if (x > 245) {
      day= {
246 : " 7 02 1444 " ,
247 : " 8 02 1444 " ,
248 : " 9 02 1444 " ,
249 : " 10 02 1444 " ,
250 : " 11 02 1444 " ,
251 : " 12 02 1444 " ,
252 : " 13 02 1444 " ,
253 : " 14 02 1444 " ,
254 : " 15 02 1444 " ,
255 : " 16 02 1444 " ,
256 : " 17 02 1444 " ,
257 : " 18 02 1444 " ,
258 : " 19 02 1444 " ,
259 : " 20 02 1444 " ,
260 : " 21 02 1444 " ,
261 : " 22 02 1444 " ,
262 : " 23 02 1444 " ,
263 : " 24 02 1444 " ,
264 : " 25 02 1444 " ,
265 : " 26 02 1444 " ,
266 : " 27 02 1444 " ,
267 : " 28 02 1444 " ,
268 : " 29 02 1444 " ,
269 : " 30 02 1444 " ,
270 : " 1 03 1444 " ,
271 : " 2 03 1444 " ,
272 : " 3 03 1444 " ,
273 : " 4 03 1444 " ,
274 : " 5 03 1444 " ,
275 : " 6 03 1444 " ,
276 : " 7 03 1444 " ,
277 : " 8 03 1444 " ,
278 : " 9 03 1444 " ,
279 : " 10 03 1444 " ,
280 : " 11 03 1444 " ,
281 : " 12 03 1444 " ,
282 : " 13 03 1444 " ,
283 : " 14 03 1444 " ,
284 : " 15 03 1444 " ,
285 : " 16 03 1444 " ,
286 : " 17 03 1444 " ,
287 : " 18 03 1444 " ,
288 : " 19 03 1444 " ,
289 : " 20 03 1444 " ,
290 : " 21 03 1444 " ,
291 : " 22 03 1444 " ,
292 : " 23 03 1444 " ,
293 : " 24 03 1444 " ,
294 : " 25 03 1444 " ,
295 : " 26 03 1444 " ,
296 : " 27 03 1444 " ,
297 : " 28 03 1444 " ,
298 : " 29 03 1444 " ,
299 : " 1 04 1444 " ,
300 : " 2 04 1444 " ,
301 : " 3 04 1444 " ,
302 : " 4 04 1444 " ,
303 : " 5 04 1444 " ,
304 : " 6 04 1444 " ,
305 : " 7 04 1444 " ,
306 : " 8 04 1444 " ,
307 : " 9 04 1444 " ,
308 : " 10 04 1444 " ,
309 : " 11 04 1444 " ,
310 : " 12 04 1444 " ,
311 : " 13 04 1444 " ,
312 : " 14 04 1444 " ,
313 : " 15 04 1444 " ,
314 : " 16 04 1444 " ,
315 : " 17 04 1444 " ,
316 : " 18 04 1444 " ,
317 : " 19 04 1444 " ,
318 : " 20 04 1444 " ,
319 : " 21 04 1444 " ,
320 : " 22 04 1444 " ,
321 : " 23 04 1444 " ,
322 : " 24 04 1444 " ,
323 : " 25 04 1444 " ,
324 : " 26 04 1444 " ,
325 : " 27 04 1444 " ,
326 : " 28 04 1444 " ,
327 : " 29 04 1444 " ,
328 : " 30 04 1444 " ,
329 : " 1 05 1444 " ,
330 : " 2 05 1444 " ,
331 : " 3 05 1444 " ,
332 : " 4 05 1444 " ,
333 : " 5 05 1444 " ,
334 : " 6 05 1444 " ,
335 : " 7 05 1444 " ,
336 : " 8 05 1444 " ,
337 : " 9 05 1444 " ,
338 : " 10 05 1444 " ,
339 : " 11 05 1444 " ,
340 : " 12 05 1444 " ,
341 : " 13 05 1444 " ,
342 : " 14 05 1444 " ,
343 : " 15 05 1444 " ,
344 : " 16 05 1444 " ,
345 : " 17 05 1444 " ,
346 : " 18 05 1444 " ,
347 : " 19 05 1444 " ,
348 : " 20 05 1444 " ,
349 : " 21 05 1444 " ,
350 : " 22 05 1444 " ,
351 : " 23 05 1444 " ,
352 : " 24 05 1444 " ,
353 : " 25 05 1444 " ,
354 : " 26 05 1444 " ,
355 : " 27 05 1444 " ,
356 : " 28 05 1444 " ,
357 : " 29 05 1444 " ,
358 : " 30 05 1444 " ,
359 : " 1 06 1444 " ,
360 : " 2 06 1444 " ,
361 : " 3 06 1444 " ,
362 : " 4 06 1444 " ,
363 : " 5 06 1444 " ,
364 : " 6 06 1444 " ,
365 : " 7 06 1444 " ,
366 : " 8 06 1444 " ,
367 : " 9 06 1444 " ,
368 : " 10 06 1444 " ,
369 : " 11 06 1444 " ,
370 : " 12 06 1444 " ,
371 : " 13 06 1444 " ,
};

  let z=day[x];
  let z1=day[x+1];
  let z2=day[x+2];
  let z3=day[x+3];
  let z4=day[x+4];
  let z5=day[x+5];
  let z6=day[x+6];
  return [z,z1,z2,z3,z4,z5,z6];
}
  else if (x > 119) {
      day= {
120 : " 29 09 1443 " ,
121 : " 30 09 1443 " ,
122 : " 1 10 1443 " ,
123 : " 2 10 1443 " ,
124 : " 3 10 1443 " ,
125 : " 4 10 1443 " ,
126 : " 5 10 1443 " ,
127 : " 6 10 1443 " ,
128 : " 7 10 1443 " ,
129 : " 8 10 1443 " ,
130 : " 9 10 1443 " ,
131 : " 10 10 1443 " ,
132 : " 11 10 1443 " ,
133 : " 12 10 1443 " ,
134 : " 13 10 1443 " ,
135 : " 14 10 1443 " ,
136 : " 15 10 1443 " ,
137 : " 16 10 1443 " ,
138 : " 17 10 1443 " ,
139 : " 18 10 1443 " ,
140 : " 19 10 1443 " ,
141 : " 20 10 1443 " ,
142 : " 21 10 1443 " ,
143 : " 22 10 1443 " ,
144 : " 23 10 1443 " ,
145 : " 24 10 1443 " ,
146 : " 25 10 1443 " ,
147 : " 26 10 1443 " ,
148 : " 27 10 1443 " ,
149 : " 28 10 1443 " ,
150 : " 29 10 1443 " ,
151 : " 1 11 1443 " ,
152 : " 2 11 1443 " ,
153 : " 3 11 1443 " ,
154 : " 4 11 1443 " ,
155 : " 5 11 1443 " ,
156 : " 6 11 1443 " ,
157 : " 7 11 1443 " ,
158 : " 8 11 1443 " ,
159 : " 9 11 1443 " ,
160 : " 10 11 1443 " ,
161 : " 11 11 1443 " ,
162 : " 12 11 1443 " ,
163 : " 13 11 1443 " ,
164 : " 14 11 1443 " ,
165 : " 15 11 1443 " ,
166 : " 16 11 1443 " ,
167 : " 17 11 1443 " ,
168 : " 18 11 1443 " ,
169 : " 19 11 1443 " ,
170 : " 20 11 1443 " ,
171 : " 21 11 1443 " ,
172 : " 22 11 1443 " ,
173 : " 23 11 1443 " ,
174 : " 24 11 1443 " ,
175 : " 25 11 1443 " ,
176 : " 26 11 1443 " ,
177 : " 27 11 1443 " ,
178 : " 28 11 1443 " ,
179 : " 29 11 1443 " ,
180 : " 30 11 1443 " ,
181 : " 1 12 1443 " ,
182 : " 2 12 1443 " ,
183 : " 3 12 1443 " ,
184 : " 4 12 1443 " ,
185 : " 5 12 1443 " ,
186 : " 6 12 1443 " ,
187 : " 7 12 1443 " ,
188 : " 8 12 1443 " ,
189 : " 9 12 1443 " ,
190 : " 10 12 1443 " ,
191 : " 11 12 1443 " ,
192 : " 12 12 1443 " ,
193 : " 13 12 1443 " ,
194 : " 14 12 1443 " ,
195 : " 15 12 1443 " ,
196 : " 16 12 1443 " ,
197 : " 17 12 1443 " ,
198 : " 18 12 1443 " ,
199 : " 19 12 1443 " ,
200 : " 20 12 1443 " ,
201 : " 21 12 1443 " ,
202 : " 22 12 1443 " ,
203 : " 23 12 1443 " ,
204 : " 24 12 1443 " ,
205 : " 25 12 1443 " ,
206 : " 26 12 1443 " ,
207 : " 27 12 1443 " ,
208 : " 28 12 1443 " ,
209 : " 29 12 1443 " ,
210 : " 30 12 1443 " ,
211 : " 1 01 1444 " ,
212 : " 2 01 1444 " ,
213 : " 3 01 1444 " ,
214 : " 4 01 1444 " ,
215 : " 5 01 1444 " ,
216 : " 6 01 1444 " ,
217 : " 7 01 1444 " ,
218 : " 8 01 1444 " ,
219 : " 9 01 1444 " ,
220 : " 10 01 1444 " ,
221 : " 11 01 1444 " ,
222 : " 12 01 1444 " ,
223 : " 13 01 1444 " ,
224 : " 14 01 1444 " ,
225 : " 15 01 1444 " ,
226 : " 16 01 1444 " ,
227 : " 17 01 1444 " ,
228 : " 18 01 1444 " ,
229 : " 19 01 1444 " ,
230 : " 20 01 1444 " ,
231 : " 21 01 1444 " ,
232 : " 22 01 1444 " ,
233 : " 23 01 1444 " ,
234 : " 24 01 1444 " ,
235 : " 25 01 1444 " ,
236 : " 26 01 1444 " ,
237 : " 27 01 1444 " ,
238 : " 28 01 1444 " ,
239 : " 29 01 1444 " ,
240 : " 1 02 1444 " ,
241 : " 2 02 1444 " ,
242 : " 3 02 1444 " ,
243 : " 4 02 1444 " ,
244 : " 5 02 1444 " ,
245 : " 6 02 1444 " ,
};

  let z=day[x];
  let z1=day[x+1];
  let z2=day[x+2];
  let z3=day[x+3];
  let z4=day[x+4];
  let z5=day[x+5];
  let z6=day[x+6];
  return [z,z1,z2,z3,z4,z5,z6];
}
  else {
      day= {
1 : " 28 05 1443 " ,
2 : " 29 05 1443 " ,
3 : " 30 05 1443 " ,
4 : " 1 06 1443 " ,
5 : " 2 06 1443 " ,
6 : " 3 06 1443 " ,
7 : " 4 06 1443 " ,
8 : " 5 06 1443 " ,
9 : " 6 06 1443 " ,
10 : " 7 06 1443 " ,
11 : " 8 06 1443 " ,
12 : " 9 06 1443 " ,
13 : " 10 06 1443 " ,
14 : " 11 06 1443 " ,
15 : " 12 06 1443 " ,
16 : " 13 06 1443 " ,
17 : " 14 06 1443 " ,
18 : " 15 06 1443 " ,
19 : " 16 06 1443 " ,
20 : " 17 06 1443 " ,
21 : " 18 06 1443 " ,
22 : " 19 06 1443 " ,
23 : " 20 06 1443 " ,
24 : " 21 06 1443 " ,
25 : " 22 06 1443 " ,
26 : " 23 06 1443 " ,
27 : " 24 06 1443 " ,
28 : " 25 06 1443 " ,
29 : " 26 06 1443 " ,
30 : " 27 06 1443 " ,
31 : " 28 06 1443 " ,
32 : " 29 06 1443 " ,
33 : " 1 07 1443 " ,
34 : " 2 07 1443 " ,
35 : " 3 07 1443 " ,
36 : " 4 07 1443 " ,
37 : " 5 07 1443 " ,
38 : " 6 07 1443 " ,
39 : " 7 07 1443 " ,
40 : " 8 07 1443 " ,
41 : " 9 07 1443 " ,
42 : " 10 07 1443 " ,
43 : " 11 07 1443 " ,
44 : " 12 07 1443 " ,
45 : " 13 07 1443 " ,
46 : " 14 07 1443 " ,
47 : " 15 07 1443 " ,
48 : " 16 07 1443 " ,
49 : " 17 07 1443 " ,
50 : " 18 07 1443 " ,
51 : " 19 07 1443 " ,
52 : " 20 07 1443 " ,
53 : " 21 07 1443 " ,
54 : " 22 07 1443 " ,
55 : " 23 07 1443 " ,
56 : " 24 07 1443 " ,
57 : " 25 07 1443 " ,
58 : " 26 07 1443 " ,
59 : " 27 07 1443 " ,
60 : " 28 07 1443 " ,
61 : " 29 07 1443 " ,
62 : " 30 07 1443 " ,
63 : " 1 08 1443 " ,
64 : " 2 08 1443 " ,
65 : " 3 08 1443 " ,
66 : " 4 08 1443 " ,
67 : " 5 08 1443 " ,
68 : " 6 08 1443 " ,
69 : " 7 08 1443 " ,
70 : " 8 08 1443 " ,
71 : " 9 08 1443 " ,
72 : " 10 08 1443 " ,
73 : " 11 08 1443 " ,
74 : " 12 08 1443 " ,
75 : " 13 08 1443 " ,
76 : " 14 08 1443 " ,
77 : " 15 08 1443 " ,
78 : " 16 08 1443 " ,
79 : " 17 08 1443 " ,
80 : " 18 08 1443 " ,
81 : " 19 08 1443 " ,
82 : " 20 08 1443 " ,
83 : " 21 08 1443 " ,
84 : " 22 08 1443 " ,
85 : " 23 08 1443 " ,
86 : " 24 08 1443 " ,
87 : " 25 08 1443 " ,
88 : " 26 08 1443 " ,
89 : " 27 08 1443 " ,
90 : " 28 08 1443 " ,
91 : " 29 08 1443 " ,
92 : " 1 09 1443 " ,
93 : " 2 09 1443 " ,
94 : " 3 09 1443 " ,
95 : " 4 09 1443 " ,
96 : " 5 09 1443 " ,
97 : " 6 09 1443 " ,
98 : " 7 09 1443 " ,
99 : " 8 09 1443 " ,
100 : " 9 09 1443 " ,
101 : " 10 09 1443 " ,
102 : " 11 09 1443 " ,
103 : " 12 09 1443 " ,
104 : " 13 09 1443 " ,
105 : " 14 09 1443 " ,
106 : " 15 09 1443 " ,
107 : " 16 09 1443 " ,
108 : " 17 09 1443 " ,
109 : " 18 09 1443 " ,
110 : " 19 09 1443 " ,
111 : " 20 09 1443 " ,
112 : " 21 09 1443 " ,
113 : " 22 09 1443 " ,
114 : " 23 09 1443 " ,
115 : " 24 09 1443 " ,
116 : " 25 09 1443 " ,
117 : " 26 09 1443 " ,
118 : " 27 09 1443 " ,
119 : " 28 09 1443 " ,
120 : " 29 09 1443 " ,
121 : " 30 09 1443 " ,
122 : " 1 10 1443 " ,
123 : " 2 10 1443 " ,
124 : " 3 10 1443 " ,
125 : " 4 10 1443 " ,
};

  let z=day[x];
  let z11=day[x+1];
  let z2=day[x+2];
  let z3=day[x+3];
  let z4=day[x+4];
  let z5=day[x+5];
  let z6=day[x+6];
  return [z,z11,z2,z3,z4,z5,z6];
}
}
function  lookupTable2023(x)  {

  if (x > 245) {
      day= {
246 : " 18 02 1445 " ,
247 : " 19 02 1445 " ,
248 : " 20 02 1445 " ,
249 : " 21 02 1445 " ,
250 : " 22 02 1445 " ,
251 : " 23 02 1445 " ,
252 : " 24 02 1445 " ,
253 : " 25 02 1445 " ,
254 : " 26 02 1445 " ,
255 : " 27 02 1445 " ,
256 : " 28 02 1445 " ,
257 : " 29 02 1445 " ,
258 : " 30 02 1445 " ,
259 : " 1 03 1445 " ,
260 : " 2 03 1445 " ,
261 : " 3 03 1445 " ,
262 : " 4 03 1445 " ,
263 : " 5 03 1445 " ,
264 : " 6 03 1445 " ,
265 : " 7 03 1445 " ,
266 : " 8 03 1445 " ,
267 : " 9 03 1445 " ,
268 : " 10 03 1445 " ,
269 : " 11 03 1445 " ,
270 : " 12 03 1445 " ,
271 : " 13 03 1445 " ,
272 : " 14 03 1445 " ,
273 : " 15 03 1445 " ,
274 : " 16 03 1445 " ,
275 : " 17 03 1445 " ,
276 : " 18 03 1445 " ,
277 : " 19 03 1445 " ,
278 : " 20 03 1445 " ,
279 : " 21 03 1445 " ,
280 : " 22 03 1445 " ,
281 : " 23 03 1445 " ,
282 : " 24 03 1445 " ,
283 : " 25 03 1445 " ,
284 : " 26 03 1445 " ,
285 : " 27 03 1445 " ,
286 : " 28 03 1445 " ,
287 : " 29 03 1445 " ,
288 : " 30 03 1445 " ,
289 : " 1 04 1445 " ,
290 : " 2 04 1445 " ,
291 : " 3 04 1445 " ,
292 : " 4 04 1445 " ,
293 : " 5 04 1445 " ,
294 : " 6 04 1445 " ,
295 : " 7 04 1445 " ,
296 : " 8 04 1445 " ,
297 : " 9 04 1445 " ,
298 : " 10 04 1445 " ,
299 : " 11 04 1445 " ,
300 : " 12 04 1445 " ,
301 : " 13 04 1445 " ,
302 : " 14 04 1445 " ,
303 : " 15 04 1445 " ,
304 : " 16 04 1445 " ,
305 : " 17 04 1445 " ,
306 : " 18 04 1445 " ,
307 : " 19 04 1445 " ,
308 : " 20 04 1445 " ,
309 : " 21 04 1445 " ,
310 : " 22 04 1445 " ,
311 : " 23 04 1445 " ,
312 : " 24 04 1445 " ,
313 : " 25 04 1445 " ,
314 : " 26 04 1445 " ,
315 : " 27 04 1445 " ,
316 : " 28 04 1445 " ,
317 : " 29 04 1445 " ,
318 : " 30 04 1445 " ,
319 : " 1 05 1445 " ,
320 : " 2 05 1445 " ,
321 : " 3 05 1445 " ,
322 : " 4 05 1445 " ,
323 : " 5 05 1445 " ,
324 : " 6 05 1445 " ,
325 : " 7 05 1445 " ,
326 : " 8 05 1445 " ,
327 : " 9 05 1445 " ,
328 : " 10 05 1445 " ,
329 : " 11 05 1445 " ,
330 : " 12 05 1445 " ,
331 : " 13 05 1445 " ,
332 : " 14 05 1445 " ,
333 : " 15 05 1445 " ,
334 : " 16 05 1445 " ,
335 : " 17 05 1445 " ,
336 : " 18 05 1445 " ,
337 : " 19 05 1445 " ,
338 : " 20 05 1445 " ,
339 : " 21 05 1445 " ,
340 : " 22 05 1445 " ,
341 : " 23 05 1445 " ,
342 : " 24 05 1445 " ,
343 : " 25 05 1445 " ,
344 : " 26 05 1445 " ,
345 : " 27 05 1445 " ,
346 : " 28 05 1445 " ,
347 : " 29 05 1445 " ,
348 : " 1 06 1445 " ,
349 : " 2 06 1445 " ,
350 : " 3 06 1445 " ,
351 : " 4 06 1445 " ,
352 : " 5 06 1445 " ,
353 : " 6 06 1445 " ,
354 : " 7 06 1445 " ,
355 : " 8 06 1445 " ,
356 : " 9 06 1445 " ,
357 : " 10 06 1445 " ,
358 : " 11 06 1445 " ,
359 : " 12 06 1445 " ,
360 : " 13 06 1445 " ,
361 : " 14 06 1445 " ,
362 : " 15 06 1445 " ,
363 : " 16 06 1445 " ,
364 : " 17 06 1445 " ,
365 : " 18 06 1445 " ,
366 : " 19 06 1445 " ,
367 : " 20 06 1445 " ,
368 : " 21 06 1445 " ,
369 : " 22 06 1445 " ,
370 : " 23 06 1445 " ,
371 : " 24 06 1445 " ,
};

  let z=day[x];
  let z1=day[x+1];
  let z2=day[x+2];
  let z3=day[x+3];
  let z4=day[x+4];
  let z5=day[x+5];
  let z6=day[x+6];
  return [z,z1,z2,z3,z4,z5,z6];
}
  else if (x > 119) {
      day= {
120 : " 10 10 1444 " ,
121 : " 11 10 1444 " ,
122 : " 12 10 1444 " ,
123 : " 13 10 1444 " ,
124 : " 14 10 1444 " ,
125 : " 15 10 1444 " ,
126 : " 16 10 1444 " ,
127 : " 17 10 1444 " ,
128 : " 18 10 1444 " ,
129 : " 19 10 1444 " ,
130 : " 20 10 1444 " ,
131 : " 21 10 1444 " ,
132 : " 22 10 1444 " ,
133 : " 23 10 1444 " ,
134 : " 24 10 1444 " ,
135 : " 25 10 1444 " ,
136 : " 26 10 1444 " ,
137 : " 27 10 1444 " ,
138 : " 28 10 1444 " ,
139 : " 29 10 1444 " ,
140 : " 30 10 1444 " ,
141 : " 1 11 1444 " ,
142 : " 2 11 1444 " ,
143 : " 3 11 1444 " ,
144 : " 4 11 1444 " ,
145 : " 5 11 1444 " ,
146 : " 6 11 1444 " ,
147 : " 7 11 1444 " ,
148 : " 8 11 1444 " ,
149 : " 9 11 1444 " ,
150 : " 10 11 1444 " ,
151 : " 11 11 1444 " ,
152 : " 12 11 1444 " ,
153 : " 13 11 1444 " ,
154 : " 14 11 1444 " ,
155 : " 15 11 1444 " ,
156 : " 16 11 1444 " ,
157 : " 17 11 1444 " ,
158 : " 18 11 1444 " ,
159 : " 19 11 1444 " ,
160 : " 20 11 1444 " ,
161 : " 21 11 1444 " ,
162 : " 22 11 1444 " ,
163 : " 23 11 1444 " ,
164 : " 24 11 1444 " ,
165 : " 25 11 1444 " ,
166 : " 26 11 1444 " ,
167 : " 27 11 1444 " ,
168 : " 28 11 1444 " ,
169 : " 29 11 1444 " ,
170 : " 1 12 1444 " ,
171 : " 2 12 1444 " ,
172 : " 3 12 1444 " ,
173 : " 4 12 1444 " ,
174 : " 5 12 1444 " ,
175 : " 6 12 1444 " ,
176 : " 7 12 1444 " ,
177 : " 8 12 1444 " ,
178 : " 9 12 1444 " ,
179 : " 10 12 1444 " ,
180 : " 11 12 1444 " ,
181 : " 12 12 1444 " ,
182 : " 13 12 1444 " ,
183 : " 14 12 1444 " ,
184 : " 15 12 1444 " ,
185 : " 16 12 1444 " ,
186 : " 17 12 1444 " ,
187 : " 18 12 1444 " ,
188 : " 19 12 1444 " ,
189 : " 20 12 1444 " ,
190 : " 21 12 1444 " ,
191 : " 22 12 1444 " ,
192 : " 23 12 1444 " ,
193 : " 24 12 1444 " ,
194 : " 25 12 1444 " ,
195 : " 26 12 1444 " ,
196 : " 27 12 1444 " ,
197 : " 28 12 1444 " ,
198 : " 29 12 1444 " ,
199 : " 30 12 1444 " ,
200 : " 1 01 1445 " ,
201 : " 2 01 1445 " ,
202 : " 3 01 1445 " ,
203 : " 4 01 1445 " ,
204 : " 5 01 1445 " ,
205 : " 6 01 1445 " ,
206 : " 7 01 1445 " ,
207 : " 8 01 1445 " ,
208 : " 9 01 1445 " ,
209 : " 10 01 1445 " ,
210 : " 11 01 1445 " ,
211 : " 12 01 1445 " ,
212 : " 13 01 1445 " ,
213 : " 14 01 1445 " ,
214 : " 15 01 1445 " ,
215 : " 16 01 1445 " ,
216 : " 17 01 1445 " ,
217 : " 18 01 1445 " ,
218 : " 19 01 1445 " ,
219 : " 20 01 1445 " ,
220 : " 21 01 1445 " ,
221 : " 22 01 1445 " ,
222 : " 23 01 1445 " ,
223 : " 24 01 1445 " ,
224 : " 25 01 1445 " ,
225 : " 26 01 1445 " ,
226 : " 27 01 1445 " ,
227 : " 28 01 1445 " ,
228 : " 29 01 1445 " ,
229 : " 1 02 1445 " ,
230 : " 2 02 1445 " ,
231 : " 3 02 1445 " ,
232 : " 4 02 1445 " ,
233 : " 5 02 1445 " ,
234 : " 6 02 1445 " ,
235 : " 7 02 1445 " ,
236 : " 8 02 1445 " ,
237 : " 9 02 1445 " ,
238 : " 10 02 1445 " ,
239 : " 11 02 1445 " ,
240 : " 12 02 1445 " ,
241 : " 13 02 1445 " ,
242 : " 14 02 1445 " ,
243 : " 15 02 1445 " ,
244 : " 16 02 1445 " ,
245 : " 17 02 1445 " ,
};

  let z=day[x];
  let z1=day[x+1];
  let z2=day[x+2];
  let z3=day[x+3];
  let z4=day[x+4];
  let z5=day[x+5];
  let z6=day[x+6];
  return [z,z1,z2,z3,z4,z5,z6];
}
  else {
      day= {
1 : " 8 06 1444 " ,
2 : " 9 06 1444 " ,
3 : " 10 06 1444 " ,
4 : " 11 06 1444 " ,
5 : " 12 06 1444 " ,
6 : " 13 06 1444 " ,
7 : " 14 06 1444 " ,
8 : " 15 06 1444 " ,
9 : " 16 06 1444 " ,
10 : " 17 06 1444 " ,
11 : " 18 06 1444 " ,
12 : " 19 06 1444 " ,
13 : " 20 06 1444 " ,
14 : " 21 06 1444 " ,
15 : " 22 06 1444 " ,
16 : " 23 06 1444 " ,
17 : " 24 06 1444 " ,
18 : " 25 06 1444 " ,
19 : " 26 06 1444 " ,
20 : " 27 06 1444 " ,
21 : " 28 06 1444 " ,
22 : " 29 06 1444 " ,
23 : " 1 07 1444 " ,
24 : " 2 07 1444 " ,
25 : " 3 07 1444 " ,
26 : " 4 07 1444 " ,
27 : " 5 07 1444 " ,
28 : " 6 07 1444 " ,
29 : " 7 07 1444 " ,
30 : " 8 07 1444 " ,
31 : " 9 07 1444 " ,
32 : " 10 07 1444 " ,
33 : " 11 07 1444 " ,
34 : " 12 07 1444 " ,
35 : " 13 07 1444 " ,
36 : " 14 07 1444 " ,
37 : " 15 07 1444 " ,
38 : " 16 07 1444 " ,
39 : " 17 07 1444 " ,
40 : " 18 07 1444 " ,
41 : " 19 07 1444 " ,
42 : " 20 07 1444 " ,
43 : " 21 07 1444 " ,
44 : " 22 07 1444 " ,
45 : " 23 07 1444 " ,
46 : " 24 07 1444 " ,
47 : " 25 07 1444 " ,
48 : " 26 07 1444 " ,
49 : " 27 07 1444 " ,
50 : " 28 07 1444 " ,
51 : " 29 07 1444 " ,
52 : " 1 08 1444 " ,
53 : " 2 08 1444 " ,
54 : " 3 08 1444 " ,
55 : " 4 08 1444 " ,
56 : " 5 08 1444 " ,
57 : " 6 08 1444 " ,
58 : " 7 08 1444 " ,
59 : " 8 08 1444 " ,
60 : " 9 08 1444 " ,
61 : " 10 08 1444 " ,
62 : " 11 08 1444 " ,
63 : " 12 08 1444 " ,
64 : " 13 08 1444 " ,
65 : " 14 08 1444 " ,
66 : " 15 08 1444 " ,
67 : " 16 08 1444 " ,
68 : " 17 08 1444 " ,
69 : " 18 08 1444 " ,
70 : " 19 08 1444 " ,
71 : " 20 08 1444 " ,
72 : " 21 08 1444 " ,
73 : " 22 08 1444 " ,
74 : " 23 08 1444 " ,
75 : " 24 08 1444 " ,
76 : " 25 08 1444 " ,
77 : " 26 08 1444 " ,
78 : " 27 08 1444 " ,
79 : " 28 08 1444 " ,
80 : " 29 08 1444 " ,
81 : " 30 08 1444 " ,
82 : " 1 09 1444 " ,
83 : " 2 09 1444 " ,
84 : " 3 09 1444 " ,
85 : " 4 09 1444 " ,
86 : " 5 09 1444 " ,
87 : " 6 09 1444 " ,
88 : " 7 09 1444 " ,
89 : " 8 09 1444 " ,
90 : " 9 09 1444 " ,
91 : " 10 09 1444 " ,
92 : " 11 09 1444 " ,
93 : " 12 09 1444 " ,
94 : " 13 09 1444 " ,
95 : " 14 09 1444 " ,
96 : " 15 09 1444 " ,
97 : " 16 09 1444 " ,
98 : " 17 09 1444 " ,
99 : " 18 09 1444 " ,
100 : " 19 09 1444 " ,
101 : " 20 09 1444 " ,
102 : " 21 09 1444 " ,
103 : " 22 09 1444 " ,
104 : " 23 09 1444 " ,
105 : " 24 09 1444 " ,
106 : " 25 09 1444 " ,
107 : " 26 09 1444 " ,
108 : " 27 09 1444 " ,
109 : " 28 09 1444 " ,
110 : " 29 09 1444 " ,
111 : " 1 10 1444 " ,
112 : " 2 10 1444 " ,
113 : " 3 10 1444 " ,
114 : " 4 10 1444 " ,
115 : " 5 10 1444 " ,
116 : " 6 10 1444 " ,
117 : " 7 10 1444 " ,
118 : " 8 10 1444 " ,
119 : " 9 10 1444 " ,
120 : " 10 10 1444 " ,
121 : " 11 10 1444 " ,
122 : " 12 10 1444 " ,
123 : " 13 10 1444 " ,
124 : " 14 10 1444 " ,
125 : " 15 10 1444 " ,
};

  let z=day[x];
  let z11=day[x+1];
  let z2=day[x+2];
  let z3=day[x+3];
  let z4=day[x+4];
  let z5=day[x+5];
  let z6=day[x+6];
  return [z,z11,z2,z3,z4,z5,z6];
}
}

function  lookupTable2024(x)  {

  if (x > 245) {
      day= {
246 : " 29 02 1446 " ,
247 : " 30 02 1446 " ,
248 : " 1 03 1446 " ,
249 : " 2 03 1446 " ,
250 : " 3 03 1446 " ,
251 : " 4 03 1446 " ,
252 : " 5 03 1446 " ,
253 : " 6 03 1446 " ,
254 : " 7 03 1446 " ,
255 : " 8 03 1446 " ,
256 : " 9 03 1446 " ,
257 : " 10 03 1446 " ,
258 : " 11 03 1446 " ,
259 : " 12 03 1446 " ,
260 : " 13 03 1446 " ,
261 : " 14 03 1446 " ,
262 : " 15 03 1446 " ,
263 : " 16 03 1446 " ,
264 : " 17 03 1446 " ,
265 : " 18 03 1446 " ,
266 : " 19 03 1446 " ,
267 : " 20 03 1446 " ,
268 : " 21 03 1446 " ,
269 : " 22 03 1446 " ,
270 : " 23 03 1446 " ,
271 : " 24 03 1446 " ,
272 : " 25 03 1446 " ,
273 : " 26 03 1446 " ,
274 : " 27 03 1446 " ,
275 : " 28 03 1446 " ,
276 : " 29 03 1446 " ,
277 : " 30 03 1446 " ,
278 : " 1 04 1446 " ,
279 : " 2 04 1446 " ,
280 : " 3 04 1446 " ,
281 : " 4 04 1446 " ,
282 : " 5 04 1446 " ,
283 : " 6 04 1446 " ,
284 : " 7 04 1446 " ,
285 : " 8 04 1446 " ,
286 : " 9 04 1446 " ,
287 : " 10 04 1446 " ,
288 : " 11 04 1446 " ,
289 : " 12 04 1446 " ,
290 : " 13 04 1446 " ,
291 : " 14 04 1446 " ,
292 : " 15 04 1446 " ,
293 : " 16 04 1446 " ,
294 : " 17 04 1446 " ,
295 : " 18 04 1446 " ,
296 : " 19 04 1446 " ,
297 : " 20 04 1446 " ,
298 : " 21 04 1446 " ,
299 : " 22 04 1446 " ,
300 : " 23 04 1446 " ,
301 : " 24 04 1446 " ,
302 : " 25 04 1446 " ,
303 : " 26 04 1446 " ,
304 : " 27 04 1446 " ,
305 : " 28 04 1446 " ,
306 : " 29 04 1446 " ,
307 : " 30 04 1446 " ,
308 : " 1 05 1446 " ,
309 : " 2 05 1446 " ,
310 : " 3 05 1446 " ,
311 : " 4 05 1446 " ,
312 : " 5 05 1446 " ,
313 : " 6 05 1446 " ,
314 : " 7 05 1446 " ,
315 : " 8 05 1446 " ,
316 : " 9 05 1446 " ,
317 : " 10 05 1446 " ,
318 : " 11 05 1446 " ,
319 : " 12 05 1446 " ,
320 : " 13 05 1446 " ,
321 : " 14 05 1446 " ,
322 : " 15 05 1446 " ,
323 : " 16 05 1446 " ,
324 : " 17 05 1446 " ,
325 : " 18 05 1446 " ,
326 : " 19 05 1446 " ,
327 : " 20 05 1446 " ,
328 : " 21 05 1446 " ,
329 : " 22 05 1446 " ,
330 : " 23 05 1446 " ,
331 : " 24 05 1446 " ,
332 : " 25 05 1446 " ,
333 : " 26 05 1446 " ,
334 : " 27 05 1446 " ,
335 : " 28 05 1446 " ,
336 : " 29 05 1446 " ,
337 : " 1 06 1446 " ,
338 : " 2 06 1446 " ,
339 : " 3 06 1446 " ,
340 : " 4 06 1446 " ,
341 : " 5 06 1446 " ,
342 : " 6 06 1446 " ,
343 : " 7 06 1446 " ,
344 : " 8 06 1446 " ,
345 : " 9 06 1446 " ,
346 : " 10 06 1446 " ,
347 : " 11 06 1446 " ,
348 : " 12 06 1446 " ,
349 : " 13 06 1446 " ,
350 : " 14 06 1446 " ,
351 : " 15 06 1446 " ,
352 : " 16 06 1446 " ,
353 : " 17 06 1446 " ,
354 : " 18 06 1446 " ,
355 : " 19 06 1446 " ,
356 : " 20 06 1446 " ,
357 : " 21 06 1446 " ,
358 : " 22 06 1446 " ,
359 : " 23 06 1446 " ,
360 : " 24 06 1446 " ,
361 : " 25 06 1446 " ,
362 : " 26 06 1446 " ,
363 : " 27 06 1446 " ,
364 : " 28 06 1446 " ,
365 : " 29 06 1446 " ,
366 : " 30 06 1446 " ,
367 : " 1 07 1446 " ,
368 : " 2 07 1446 " ,
369 : " 3 07 1446 " ,
370 : " 4 07 1446 " ,
371 : " 5 07 1446 " ,
372 : " 6 07 1446 " ,
};

  let z=day[x];
  let z1=day[x+1];
  let z2=day[x+2];
  let z3=day[x+3];
  let z4=day[x+4];
  let z5=day[x+5];
  let z6=day[x+6];
  return [z,z1,z2,z3,z4,z5,z6];
}
  else if (x > 119) {
      day= {
120 : " 20 10 1445 " ,
121 : " 21 10 1445 " ,
122 : " 22 10 1445 " ,
123 : " 23 10 1445 " ,
124 : " 24 10 1445 " ,
125 : " 25 10 1445 " ,
126 : " 26 10 1445 " ,
127 : " 27 10 1445 " ,
128 : " 28 10 1445 " ,
129 : " 29 10 1445 " ,
130 : " 1 11 1445 " ,
131 : " 2 11 1445 " ,
132 : " 3 11 1445 " ,
133 : " 4 11 1445 " ,
134 : " 5 11 1445 " ,
135 : " 6 11 1445 " ,
136 : " 7 11 1445 " ,
137 : " 8 11 1445 " ,
138 : " 9 11 1445 " ,
139 : " 10 11 1445 " ,
140 : " 11 11 1445 " ,
141 : " 12 11 1445 " ,
142 : " 13 11 1445 " ,
143 : " 14 11 1445 " ,
144 : " 15 11 1445 " ,
145 : " 16 11 1445 " ,
146 : " 17 11 1445 " ,
147 : " 18 11 1445 " ,
148 : " 19 11 1445 " ,
149 : " 20 11 1445 " ,
150 : " 21 11 1445 " ,
151 : " 22 11 1445 " ,
152 : " 23 11 1445 " ,
153 : " 24 11 1445 " ,
154 : " 25 11 1445 " ,
155 : " 26 11 1445 " ,
156 : " 27 11 1445 " ,
157 : " 28 11 1445 " ,
158 : " 29 11 1445 " ,
159 : " 1 12 1445 " ,
160 : " 2 12 1445 " ,
161 : " 3 12 1445 " ,
162 : " 4 12 1445 " ,
163 : " 5 12 1445 " ,
164 : " 6 12 1445 " ,
165 : " 7 12 1445 " ,
166 : " 8 12 1445 " ,
167 : " 9 12 1445 " ,
168 : " 10 12 1445 " ,
169 : " 11 12 1445 " ,
170 : " 12 12 1445 " ,
171 : " 13 12 1445 " ,
172 : " 14 12 1445 " ,
173 : " 15 12 1445 " ,
174 : " 16 12 1445 " ,
175 : " 17 12 1445 " ,
176 : " 18 12 1445 " ,
177 : " 19 12 1445 " ,
178 : " 20 12 1445 " ,
179 : " 21 12 1445 " ,
180 : " 22 12 1445 " ,
181 : " 23 12 1445 " ,
182 : " 24 12 1445 " ,
183 : " 25 12 1445 " ,
184 : " 26 12 1445 " ,
185 : " 27 12 1445 " ,
186 : " 28 12 1445 " ,
187 : " 29 12 1445 " ,
188 : " 30 12 1445 " ,
189 : " 1 01 1446 " ,
190 : " 2 01 1446 " ,
191 : " 3 01 1446 " ,
192 : " 4 01 1446 " ,
193 : " 5 01 1446 " ,
194 : " 6 01 1446 " ,
195 : " 7 01 1446 " ,
196 : " 8 01 1446 " ,
197 : " 9 01 1446 " ,
198 : " 10 01 1446 " ,
199 : " 11 01 1446 " ,
200 : " 12 01 1446 " ,
201 : " 13 01 1446 " ,
202 : " 14 01 1446 " ,
203 : " 15 01 1446 " ,
204 : " 16 01 1446 " ,
205 : " 17 01 1446 " ,
206 : " 18 01 1446 " ,
207 : " 19 01 1446 " ,
208 : " 20 01 1446 " ,
209 : " 21 01 1446 " ,
210 : " 22 01 1446 " ,
211 : " 23 01 1446 " ,
212 : " 24 01 1446 " ,
213 : " 25 01 1446 " ,
214 : " 26 01 1446 " ,
215 : " 27 01 1446 " ,
216 : " 28 01 1446 " ,
217 : " 29 01 1446 " ,
218 : " 1 02 1446 " ,
219 : " 2 02 1446 " ,
220 : " 3 02 1446 " ,
221 : " 4 02 1446 " ,
222 : " 5 02 1446 " ,
223 : " 6 02 1446 " ,
224 : " 7 02 1446 " ,
225 : " 8 02 1446 " ,
226 : " 9 02 1446 " ,
227 : " 10 02 1446 " ,
228 : " 11 02 1446 " ,
229 : " 12 02 1446 " ,
230 : " 13 02 1446 " ,
231 : " 14 02 1446 " ,
232 : " 15 02 1446 " ,
233 : " 16 02 1446 " ,
234 : " 17 02 1446 " ,
235 : " 18 02 1446 " ,
236 : " 19 02 1446 " ,
237 : " 20 02 1446 " ,
238 : " 21 02 1446 " ,
239 : " 22 02 1446 " ,
240 : " 23 02 1446 " ,
241 : " 24 02 1446 " ,
242 : " 25 02 1446 " ,
243 : " 26 02 1446 " ,
244 : " 27 02 1446 " ,
245 : " 28 02 1446 " ,
};

  let z=day[x];
  let z1=day[x+1];
  let z2=day[x+2];
  let z3=day[x+3];
  let z4=day[x+4];
  let z5=day[x+5];
  let z6=day[x+6];
  return [z,z1,z2,z3,z4,z5,z6];
}
  else {
      day= {
1 : " 19 06 1445 " ,
2 : " 20 06 1445 " ,
3 : " 21 06 1445 " ,
4 : " 22 06 1445 " ,
5 : " 23 06 1445 " ,
6 : " 24 06 1445 " ,
7 : " 25 06 1445 " ,
8 : " 26 06 1445 " ,
9 : " 27 06 1445 " ,
10 : " 28 06 1445 " ,
11 : " 29 06 1445 " ,
12 : " 30 07 1445 " ,
13 : " 1 07 1445 " ,
14 : " 2 07 1445 " ,
15 : " 3 07 1445 " ,
16 : " 4 07 1445 " ,
17 : " 5 07 1445 " ,
18 : " 6 07 1445 " ,
19 : " 7 07 1445 " ,
20 : " 8 07 1445 " ,
21 : " 9 07 1445 " ,
22 : " 10 07 1445 " ,
23 : " 11 07 1445 " ,
24 : " 12 07 1445 " ,
25 : " 13 07 1445 " ,
26 : " 14 07 1445 " ,
27 : " 15 07 1445 " ,
28 : " 16 07 1445 " ,
29 : " 17 07 1445 " ,
30 : " 18 07 1445 " ,
31 : " 19 07 1445 " ,
32 : " 20 07 1445 " ,
33 : " 21 07 1445 " ,
34 : " 22 07 1445 " ,
35 : " 23 07 1445 " ,
36 : " 24 07 1445 " ,
37 : " 25 07 1445 " ,
38 : " 26 07 1445 " ,
39 : " 27 07 1445 " ,
40 : " 28 07 1445 " ,
41 : " 29 07 1445 " ,
42 : " 1 08 1445 " ,
43 : " 2 08 1445 " ,
44 : " 3 08 1445 " ,
45 : " 4 08 1445 " ,
46 : " 5 08 1445 " ,
47 : " 6 08 1445 " ,
48 : " 7 08 1445 " ,
49 : " 8 08 1445 " ,
50 : " 9 08 1445 " ,
51 : " 10 08 1445 " ,
52 : " 11 08 1445 " ,
53 : " 12 08 1445 " ,
54 : " 13 08 1445 " ,
55 : " 14 08 1445 " ,
56 : " 15 08 1445 " ,
57 : " 16 08 1445 " ,
58 : " 17 08 1445 " ,
59 : " 18 08 1445 " ,
60 : " 19 08 1445 " ,
61 : " 20 08 1445 " ,
62 : " 21 08 1445 " ,
63 : " 22 08 1445 " ,
64 : " 23 08 1445 " ,
65 : " 24 08 1445 " ,
66 : " 25 08 1445 " ,
67 : " 26 08 1445 " ,
68 : " 27 08 1445 " ,
69 : " 28 08 1445 " ,
70 : " 29 08 1445 " ,
71 : " 1 09 1445 " ,
72 : " 2 09 1445 " ,
73 : " 3 09 1445 " ,
74 : " 4 09 1445 " ,
75 : " 5 09 1445 " ,
76 : " 6 09 1445 " ,
77 : " 7 09 1445 " ,
78 : " 8 09 1445 " ,
79 : " 9 09 1445 " ,
80 : " 10 09 1445 " ,
81 : " 11 09 1445 " ,
82 : " 12 09 1445 " ,
83 : " 13 09 1445 " ,
84 : " 14 09 1445 " ,
85 : " 15 09 1445 " ,
86 : " 16 09 1445 " ,
87 : " 17 09 1445 " ,
88 : " 18 09 1445 " ,
89 : " 19 09 1445 " ,
90 : " 20 09 1445 " ,
91 : " 21 09 1445 " ,
92 : " 22 09 1445 " ,
93 : " 23 09 1445 " ,
94 : " 24 09 1445 " ,
95 : " 25 09 1445 " ,
96 : " 26 09 1445 " ,
97 : " 27 09 1445 " ,
98 : " 28 09 1445 " ,
99 : " 29 09 1445 " ,
100 : " 30 09 1445 " ,
101 : " 1 10 1445 " ,
102 : " 2 10 1445 " ,
103 : " 3 10 1445 " ,
104 : " 4 10 1445 " ,
105 : " 5 10 1445 " ,
106 : " 6 10 1445 " ,
107 : " 7 10 1445 " ,
108 : " 8 10 1445 " ,
109 : " 9 10 1445 " ,
110 : " 10 10 1445 " ,
111 : " 11 10 1445 " ,
112 : " 12 10 1445 " ,
113 : " 13 10 1445 " ,
114 : " 14 10 1445 " ,
115 : " 15 10 1445 " ,
116 : " 16 10 1445 " ,
117 : " 17 10 1445 " ,
118 : " 18 10 1445 " ,
119 : " 19 10 1445 " ,
120 : " 20 10 1445 " ,
121 : " 21 10 1445 " ,
122 : " 22 10 1445 " ,
123 : " 23 10 1445 " ,
124 : " 24 10 1445 " ,
125 : " 25 10 1445 " ,
};

  let z=day[x];
  let z11=day[x+1];
  let z2=day[x+2];
  let z3=day[x+3];
  let z4=day[x+4];
  let z5=day[x+5];
  let z6=day[x+6];
  return [z,z11,z2,z3,z4,z5,z6];
}
}

function  lookupTable2025(x)  {

  if (x > 245) {
      day= {
245 : " 10 03 1447 " ,
246 : " 11 03 1447 " ,
247 : " 12 03 1447 " ,
248 : " 13 03 1447 " ,
249 : " 14 03 1447 " ,
250 : " 15 03 1447 " ,
251 : " 16 03 1447 " ,
252 : " 17 03 1447 " ,
253 : " 18 03 1447 " ,
254 : " 19 03 1447 " ,
255 : " 20 03 1447 " ,
256 : " 21 03 1447 " ,
257 : " 22 03 1447 " ,
258 : " 23 03 1447 " ,
259 : " 24 03 1447 " ,
260 : " 25 03 1447 " ,
261 : " 26 03 1447 " ,
262 : " 27 03 1447 " ,
263 : " 28 03 1447 " ,
264 : " 29 03 1447 " ,
265 : " 30 03 1447 " ,
266 : " 1 04 1447 " ,
267 : " 2 04 1447 " ,
268 : " 3 04 1447 " ,
269 : " 4 04 1447 " ,
270 : " 5 04 1447 " ,
271 : " 6 04 1447 " ,
272 : " 7 04 1447 " ,
273 : " 8 04 1447 " ,
274 : " 9 04 1447 " ,
275 : " 10 04 1447 " ,
276 : " 11 04 1447 " ,
277 : " 12 04 1447 " ,
278 : " 13 04 1447 " ,
279 : " 14 04 1447 " ,
280 : " 15 04 1447 " ,
281 : " 16 04 1447 " ,
282 : " 17 04 1447 " ,
283 : " 18 04 1447 " ,
284 : " 19 04 1447 " ,
285 : " 20 04 1447 " ,
286 : " 21 04 1447 " ,
287 : " 22 04 1447 " ,
288 : " 23 04 1447 " ,
289 : " 24 04 1447 " ,
290 : " 25 04 1447 " ,
291 : " 26 04 1447 " ,
292 : " 27 04 1447 " ,
293 : " 28 04 1447 " ,
294 : " 29 04 1447 " ,
295 : " 30 04 1447 " ,
296 : " 1 05 1447 " ,
297 : " 2 05 1447 " ,
298 : " 3 05 1447 " ,
299 : " 4 05 1447 " ,
300 : " 5 05 1447 " ,
301 : " 6 05 1447 " ,
302 : " 7 05 1447 " ,
303 : " 8 05 1447 " ,
304 : " 9 05 1447 " ,
305 : " 10 05 1447 " ,
306 : " 11 05 1447 " ,
307 : " 12 05 1447 " ,
308 : " 13 05 1447 " ,
309 : " 14 05 1447 " ,
310 : " 15 05 1447 " ,
311 : " 16 05 1447 " ,
312 : " 17 05 1447 " ,
313 : " 18 05 1447 " ,
314 : " 19 05 1447 " ,
315 : " 20 05 1447 " ,
316 : " 21 05 1447 " ,
317 : " 22 05 1447 " ,
318 : " 23 05 1447 " ,
319 : " 24 05 1447 " ,
320 : " 25 05 1447 " ,
321 : " 26 05 1447 " ,
322 : " 27 05 1447 " ,
323 : " 28 05 1447 " ,
324 : " 29 05 1447 " ,
325 : " 30 05 1447 " ,
326 : " 1 06 1447 " ,
327 : " 2 06 1447 " ,
328 : " 3 06 1447 " ,
329 : " 4 06 1447 " ,
330 : " 5 06 1447 " ,
331 : " 6 06 1447 " ,
332 : " 7 06 1447 " ,
333 : " 8 06 1447 " ,
334 : " 9 06 1447 " ,
335 : " 10 06 1447 " ,
336 : " 11 06 1447 " ,
337 : " 12 06 1447 " ,
338 : " 13 06 1447 " ,
339 : " 14 06 1447 " ,
340 : " 15 06 1447 " ,
341 : " 16 06 1447 " ,
342 : " 17 06 1447 " ,
343 : " 18 06 1447 " ,
344 : " 19 06 1447 " ,
345 : " 20 06 1447 " ,
346 : " 21 06 1447 " ,
347 : " 22 06 1447 " ,
348 : " 23 06 1447 " ,
349 : " 24 06 1447 " ,
350 : " 25 06 1447 " ,
351 : " 26 06 1447 " ,
352 : " 27 06 1447 " ,
353 : " 28 06 1447 " ,
354 : " 29 06 1447 " ,
355 : " 1 07 1447 " ,
356 : " 2 07 1447 " ,
357 : " 3 07 1447 " ,
358 : " 4 07 1447 " ,
359 : " 5 07 1447 " ,
360 : " 6 07 1447 " ,
361 : " 7 07 1447 " ,
362 : " 8 07 1447 " ,
363 : " 9 07 1447 " ,
364 : " 10 07 1447 " ,
365 : " 11 07 1447 " ,
366 : " 0 00 0000 " ,
367 : " 0 00 0000 " ,
368 : " 0 00 0000 " ,
369 : " 0 00 0000 " ,
370 : " 0 00 0000 " ,
371 : " 0 00 0000 " ,
};

  let z=day[x];
  let z1=day[x+1];
  let z2=day[x+2];
  let z3=day[x+3];
  let z4=day[x+4];
  let z5=day[x+5];
  let z6=day[x+6];
  return [z,z1,z2,z3,z4,z5,z6];
}
  else if (x > 119) {
      day= {
120 : " 2 11 1446 " ,
121 : " 3 11 1446 " ,
122 : " 4 11 1446 " ,
123 : " 5 11 1446 " ,
124 : " 6 11 1446 " ,
125 : " 7 11 1446 " ,
126 : " 8 11 1446 " ,
127 : " 9 11 1446 " ,
128 : " 10 11 1446 " ,
129 : " 11 11 1446 " ,
130 : " 12 11 1446 " ,
131 : " 13 11 1446 " ,
132 : " 14 11 1446 " ,
133 : " 15 11 1446 " ,
134 : " 16 11 1446 " ,
135 : " 17 11 1446 " ,
136 : " 18 11 1446 " ,
137 : " 19 11 1446 " ,
138 : " 20 11 1446 " ,
139 : " 21 11 1446 " ,
140 : " 22 11 1446 " ,
141 : " 23 11 1446 " ,
142 : " 24 11 1446 " ,
143 : " 25 11 1446 " ,
144 : " 26 11 1446 " ,
145 : " 27 11 1446 " ,
146 : " 28 11 1446 " ,
147 : " 29 11 1446 " ,
148 : " 1 12 1446 " ,
149 : " 2 12 1446 " ,
150 : " 3 12 1446 " ,
151 : " 4 12 1446 " ,
152 : " 5 12 1446 " ,
153 : " 6 12 1446 " ,
154 : " 7 12 1446 " ,
155 : " 8 12 1446 " ,
156 : " 9 12 1446 " ,
157 : " 10 12 1446 " ,
158 : " 11 12 1446 " ,
159 : " 12 12 1446 " ,
160 : " 13 12 1446 " ,
161 : " 14 12 1446 " ,
162 : " 15 12 1446 " ,
163 : " 16 12 1446 " ,
164 : " 17 12 1446 " ,
165 : " 18 12 1446 " ,
166 : " 19 12 1446 " ,
167 : " 20 12 1446 " ,
168 : " 21 12 1446 " ,
169 : " 22 12 1446 " ,
170 : " 23 12 1446 " ,
171 : " 24 12 1446 " ,
172 : " 25 12 1446 " ,
173 : " 26 12 1446 " ,
174 : " 27 12 1446 " ,
175 : " 28 12 1446 " ,
176 : " 29 12 1446 " ,
177 : " 1 01 1447 " ,
178 : " 2 01 1447 " ,
179 : " 3 01 1447 " ,
180 : " 4 01 1447 " ,
181 : " 5 01 1447 " ,
182 : " 6 01 1447 " ,
183 : " 7 01 1447 " ,
184 : " 8 01 1447 " ,
185 : " 9 01 1447 " ,
186 : " 10 01 1447 " ,
187 : " 11 01 1447 " ,
188 : " 12 01 1447 " ,
189 : " 13 01 1447 " ,
190 : " 14 01 1447 " ,
191 : " 15 01 1447 " ,
192 : " 16 01 1447 " ,
193 : " 17 01 1447 " ,
194 : " 18 01 1447 " ,
195 : " 19 01 1447 " ,
196 : " 20 01 1447 " ,
197 : " 21 01 1447 " ,
198 : " 22 01 1447 " ,
199 : " 23 01 1447 " ,
200 : " 24 01 1447 " ,
201 : " 25 01 1447 " ,
202 : " 26 01 1447 " ,
203 : " 27 01 1447 " ,
204 : " 28 01 1447 " ,
205 : " 29 01 1447 " ,
206 : " 30 01 1447 " ,
207 : " 1 02 1447 " ,
208 : " 2 02 1447 " ,
209 : " 3 02 1447 " ,
210 : " 4 02 1447 " ,
211 : " 5 02 1447 " ,
212 : " 6 02 1447 " ,
213 : " 7 02 1447 " ,
214 : " 8 02 1447 " ,
215 : " 9 02 1447 " ,
216 : " 10 02 1447 " ,
217 : " 11 02 1447 " ,
218 : " 12 02 1447 " ,
219 : " 13 02 1447 " ,
220 : " 14 02 1447 " ,
221 : " 15 02 1447 " ,
222 : " 16 02 1447 " ,
223 : " 17 02 1447 " ,
224 : " 18 02 1447 " ,
225 : " 19 02 1447 " ,
226 : " 20 02 1447 " ,
227 : " 21 02 1447 " ,
228 : " 22 02 1447 " ,
229 : " 23 02 1447 " ,
230 : " 24 02 1447 " ,
231 : " 25 02 1447 " ,
232 : " 26 02 1447 " ,
233 : " 27 02 1447 " ,
234 : " 28 02 1447 " ,
235 : " 29 02 1447 " ,
236 : " 1 03 1447 " ,
237 : " 2 03 1447 " ,
238 : " 3 03 1447 " ,
239 : " 4 03 1447 " ,
240 : " 5 03 1447 " ,
241 : " 6 03 1447 " ,
242 : " 7 03 1447 " ,
243 : " 8 03 1447 " ,
244 : " 9 03 1447 " ,
245 : " 10 03 1447 " ,
};

  let z=day[x];
  let z1=day[x+1];
  let z2=day[x+2];
  let z3=day[x+3];
  let z4=day[x+4];
  let z5=day[x+5];
  let z6=day[x+6];
  return [z,z1,z2,z3,z4,z5,z6];
}
  else {
      day= {
1 : " 1 07 1446 " ,
2 : " 2 07 1446 " ,
3 : " 3 07 1446 " ,
4 : " 4 07 1446 " ,
5 : " 5 07 1446 " ,
6 : " 6 07 1446 " ,
7 : " 7 07 1446 " ,
8 : " 8 07 1446 " ,
9 : " 9 07 1446 " ,
10 : " 10 07 1446 " ,
11 : " 11 07 1446 " ,
12 : " 12 07 1446 " ,
13 : " 13 07 1446 " ,
14 : " 14 07 1446 " ,
15 : " 15 07 1446 " ,
16 : " 16 07 1446 " ,
17 : " 17 07 1446 " ,
18 : " 18 07 1446 " ,
19 : " 19 07 1446 " ,
20 : " 20 07 1446 " ,
21 : " 21 07 1446 " ,
22 : " 22 07 1446 " ,
23 : " 23 07 1446 " ,
24 : " 24 07 1446 " ,
25 : " 25 07 1446 " ,
26 : " 26 07 1446 " ,
27 : " 27 07 1446 " ,
28 : " 28 07 1446 " ,
29 : " 29 07 1446 " ,
30 : " 30 07 1446 " ,
31 : " 1 08 1446 " ,
32 : " 2 08 1446 " ,
33 : " 3 08 1446 " ,
34 : " 4 08 1446 " ,
35 : " 5 08 1446 " ,
36 : " 6 08 1446 " ,
37 : " 7 08 1446 " ,
38 : " 8 08 1446 " ,
39 : " 9 08 1446 " ,
40 : " 10 08 1446 " ,
41 : " 11 08 1446 " ,
42 : " 12 08 1446 " ,
43 : " 13 08 1446 " ,
44 : " 14 08 1446 " ,
45 : " 15 08 1446 " ,
46 : " 16 08 1446 " ,
47 : " 17 08 1446 " ,
48 : " 18 08 1446 " ,
49 : " 19 08 1446 " ,
50 : " 20 08 1446 " ,
51 : " 21 08 1446 " ,
52 : " 22 08 1446 " ,
53 : " 23 08 1446 " ,
54 : " 24 08 1446 " ,
55 : " 25 08 1446 " ,
56 : " 26 08 1446 " ,
57 : " 27 08 1446 " ,
58 : " 28 08 1446 " ,
59 : " 29 08 1446 " ,
60 : " 1 09 1446 " ,
61 : " 2 09 1446 " ,
62 : " 3 09 1446 " ,
63 : " 4 09 1446 " ,
64 : " 5 09 1446 " ,
65 : " 6 09 1446 " ,
66 : " 7 09 1446 " ,
67 : " 8 09 1446 " ,
68 : " 9 09 1446 " ,
69 : " 10 09 1446 " ,
70 : " 11 09 1446 " ,
71 : " 12 09 1446 " ,
72 : " 13 09 1446 " ,
73 : " 14 09 1446 " ,
74 : " 15 09 1446 " ,
75 : " 16 09 1446 " ,
76 : " 17 09 1446 " ,
77 : " 18 09 1446 " ,
78 : " 19 09 1446 " ,
79 : " 20 09 1446 " ,
80 : " 21 09 1446 " ,
81 : " 22 09 1446 " ,
82 : " 23 09 1446 " ,
83 : " 24 09 1446 " ,
84 : " 25 09 1446 " ,
85 : " 26 09 1446 " ,
86 : " 27 09 1446 " ,
87 : " 28 09 1446 " ,
88 : " 29 09 1446 " ,
89 : " 1 10 1446 " ,
90 : " 2 10 1446 " ,
91 : " 3 10 1446 " ,
92 : " 4 10 1446 " ,
93 : " 5 10 1446 " ,
94 : " 6 10 1446 " ,
95 : " 7 10 1446 " ,
96 : " 8 10 1446 " ,
97 : " 9 10 1446 " ,
98 : " 10 10 1446 " ,
99 : " 11 10 1446 " ,
100 : " 12 10 1446 " ,
101 : " 13 10 1446 " ,
102 : " 14 10 1446 " ,
103 : " 15 10 1446 " ,
104 : " 16 10 1446 " ,
105 : " 17 10 1446 " ,
106 : " 18 10 1446 " ,
107 : " 19 10 1446 " ,
108 : " 20 10 1446 " ,
109 : " 21 10 1446 " ,
110 : " 22 10 1446 " ,
111 : " 23 10 1446 " ,
112 : " 24 10 1446 " ,
113 : " 25 10 1446 " ,
114 : " 26 10 1446 " ,
115 : " 27 10 1446 " ,
116 : " 28 10 1446 " ,
117 : " 29 10 1446 " ,
118 : " 30 10 1446 " ,
119 : " 1 11 1446 " ,
120 : " 2 11 1446 " ,
121 : " 3 11 1446 " ,
122 : " 4 11 1446 " ,
123 : " 5 11 1446 " ,
124 : " 6 11 1446 " ,
125 : " 7 11 1446 " ,
};

  let z=day[x];
  let z11=day[x+1];
  let z2=day[x+2];
  let z3=day[x+3];
  let z4=day[x+4];
  let z5=day[x+5];
  let z6=day[x+6];
  return [z,z11,z2,z3,z4,z5,z6];
}
}

function convertDate(str) {
  var dayCount = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; 
  var dte = str;

   //initialize date variable
   var julianDate = 0;
   //add days for previous months
   for (i = 0; i < dte.getMonth(); i++) {
      julianDate += dayCount[i];
   }
   //add days of the current month
   julianDate += dte.getDate();
   //check for leap year
   if (dte.getFullYear() % 4 == 0 && dte.getMonth() > 1) {
      julianDate++;
   }
   return julianDate;
}


//----------------------- PrayTimes Class ------------------------


function PrayTimes(method) {


	//------------------------ Constants --------------------------
	var
	
	// Time Names
	timeNames = {
		imsak    : 'Imsak',
		fajr     : 'Fajr',
		sunrise  : 'Sunrise',
		dhuhr    : 'Dhuhr',
		asr      : 'Asr',
		sunset   : 'Sunset',
		maghrib  : 'Maghrib',
		isha     : 'Isha',
		midnight : 'Midnight'
	},


	// Calculation Methods
	methods = {
		MWL: {
			name: 'Muslim World League',
			params: { fajr: 18, isha: 17 } },
		ISNA: {
			name: 'Islamic Society of North America (ISNA)',
			params: { fajr: 15, isha: 15 } },
		Egypt: {
			name: 'Egyptian General Authority of Survey',
			params: { fajr: 19.5, isha: 17.5 } },
		Makkah: {
			name: 'Umm Al-Qura University, Makkah',
			params: { fajr: 18.5, isha: '90 min' } },  // fajr was 19 degrees before 1430 hijri
		Karachi: {
			name: 'University of Islamic Sciences, Karachi',
			params: { fajr: 18, isha: 18 } },
		Tehran: {
			name: 'Institute of Geophysics, University of Tehran',
			params: { fajr: 17.7, isha: 14, maghrib: 4.5, midnight: 'Jafari' } },  // isha is not explicitly specified in this method
		Jafari: {
			name: 'Shia Ithna-Ashari, Leva Institute, Qum',
			params: { fajr: 16, isha: 14, maghrib: 4, midnight: 'Jafari' } }
	},


	// Default Parameters in Calculation Methods
	defaultParams = {
		maghrib: '0 min', midnight: 'Standard'

	},
 
 
	//----------------------- Parameter Values ----------------------
	/*
	
	// Asr Juristic Methods
	asrJuristics = [ 
		'Standard',    // Shafi`i, Maliki, Ja`fari, Hanbali
		'Hanafi'       // Hanafi
	],


	// Midnight Mode
	midnightMethods = [ 
		'Standard',    // Mid Sunset to Sunrise
		'Jafari'       // Mid Sunset to Fajr
	],


	// Adjust Methods for Higher Latitudes
	highLatMethods = [
		'NightMiddle', // middle of night
		'AngleBased',  // angle/60th of night
		'OneSeventh',  // 1/7th of night
		'None'         // No adjustment
	],


	// Time Formats
	timeFormats = [
		'24h',         // 24-hour format
		'12h',         // 12-hour format
		'12hNS',       // 12-hour format with no suffix
		'Float'        // floating point number 
	],
	*/	


	//---------------------- Default Settings --------------------
	
	calcMethod = 'MWL',

	// do not change anything here; use adjust method instead
	setting = {  
		imsak    : '10 min',
		dhuhr    : '0 min',  
		asr      : 'Standard',
		highLats : 'NightMiddle'
	},

	timeFormat = '24h',
	timeSuffixes = ['am', 'pm'],
	invalidTime =  '-----',

	numIterations = 1,
	offset = {},


	//----------------------- Local Variables ---------------------

	lat, lng, elv,       // coordinates
	timeZone, jDate;     // time variables
	

	//---------------------- Initialization -----------------------
	
	
	// set methods defaults
	var defParams = defaultParams;
	for (var i in methods) {
		var params = methods[i].params;
		for (var j in defParams)
			if ((typeof(params[j]) == 'undefined'))
				params[j] = defParams[j];
	};

	// initialize settings
	calcMethod = methods[method] ? method : calcMethod;
	var params = methods[calcMethod].params;
	for (var id in params)
		setting[id] = params[id];

	// init time offsets
	for (var i in timeNames)
		offset[i] = 0;

		
	
	//----------------------- Public Functions ------------------------
	return {

	
	// set calculation method 
	setMethod: function(method) {
		if (methods[method]) {
			this.adjust(methods[method].params);
			calcMethod = method;
		}
	},


	// set calculating parameters
	adjust: function(params) {
		for (var id in params)
			setting[id] = params[id];
	},


	// set time offsets
	tune: function(timeOffsets) {
		for (var i in timeOffsets)
			offset[i] = timeOffsets[i];
	},


	// get current calculation method
	getMethod: function() { return calcMethod; },

	// get current setting
	getSetting: function() { return setting; },

	// get current time offsets
	getOffsets: function() { return offset; },

	// get default calc parametrs
	getDefaults: function() { return methods; },


	// return prayer times for a given date
	getTimes: function(date, coords, timezone, dst, format) {
		lat = 1* coords[0];
		lng = 1* coords[1]; 
		elv = coords[2] ? 1* coords[2] : 0;
		timeFormat = format || timeFormat;
		if (date.constructor === Date)
			date = [date.getFullYear(), date.getMonth()+ 1, date.getDate()];
		if (typeof(timezone) == 'undefined' || timezone == 'auto')
			timezone = this.getTimeZone(date);
		if (typeof(dst) == 'undefined' || dst == 'auto') 
			dst = this.getDst(date);
		timeZone = 1* timezone+ (1* dst ? 1 : 0);
		jDate = this.julian(date[0], date[1], date[2])- lng/ (15* 24);
		
		return this.computeTimes();
	},


	// convert float time to the given format (see timeFormats)
	getFormattedTime: function(time, format, suffixes) {
		if (isNaN(time))
			return invalidTime;
		if (format == 'Float') return time;
		suffixes = suffixes || timeSuffixes;

		time = DMath.fixHour(time+ 0.5/ 60);  // add 0.5 minutes to round
		var hours = Math.floor(time); 
		var minutes = Math.floor((time- hours)* 60);
		var suffix = (format == '12h') ? suffixes[hours < 12 ? 0 : 1] : '';
		var hour = (format == '24h') ? this.twoDigitsFormat(hours) : ((hours+ 12 -1)% 12+ 1);
		return hour+ ':'+ this.twoDigitsFormat(minutes)+ (suffix ? ' '+ suffix : '');
	},


	//---------------------- Calculation Functions -----------------------


	// compute mid-day time
	midDay: function(time) {
		var eqt = this.sunPosition(jDate+ time).equation;
		var noon = DMath.fixHour(12- eqt);
		return noon;
	},


	// compute the time at which sun reaches a specific angle below horizon
	sunAngleTime: function(angle, time, direction) {
		var decl = this.sunPosition(jDate+ time).declination;
		var noon = this.midDay(time);
		var t = 1/15* DMath.arccos((-DMath.sin(angle)- DMath.sin(decl)* DMath.sin(lat))/ 
				(DMath.cos(decl)* DMath.cos(lat)));
		return noon+ (direction == 'ccw' ? -t : t);
	},


	// compute asr time 
	asrTime: function(factor, time) { 
		var decl = this.sunPosition(jDate+ time).declination;
		var angle = -DMath.arccot(factor+ DMath.tan(Math.abs(lat- decl)));
		return this.sunAngleTime(angle, time);
	},


	// compute declination angle of sun and equation of time
	// Ref: http://aa.usno.navy.mil/faq/docs/SunApprox.php
	sunPosition: function(jd) {
		var D = jd - 2451545.0;
		var g = DMath.fixAngle(357.529 + 0.98560028* D);
		var q = DMath.fixAngle(280.459 + 0.98564736* D);
		var L = DMath.fixAngle(q + 1.915* DMath.sin(g) + 0.020* DMath.sin(2*g));

		var R = 1.00014 - 0.01671* DMath.cos(g) - 0.00014* DMath.cos(2*g);
		var e = 23.439 - 0.00000036* D;

		var RA = DMath.arctan2(DMath.cos(e)* DMath.sin(L), DMath.cos(L))/ 15;
		var eqt = q/15 - DMath.fixHour(RA);
		var decl = DMath.arcsin(DMath.sin(e)* DMath.sin(L));

		return {declination: decl, equation: eqt};
	},


	// convert Gregorian date to Julian day
	// Ref: Astronomical Algorithms by Jean Meeus
	julian: function(year, month, day) {
		if (month <= 2) {
			year -= 1;
			month += 12;
		};
		var A = Math.floor(year/ 100);
		var B = 2- A+ Math.floor(A/ 4);

		var JD = Math.floor(365.25* (year+ 4716))+ Math.floor(30.6001* (month+ 1))+ day+ B- 1524.5;
		return JD;
	},

	
	//---------------------- Compute Prayer Times -----------------------


	// compute prayer times at given julian date
	computePrayerTimes: function(times) {
		times = this.dayPortion(times);
		var params  = setting;
		
		var imsak   = this.sunAngleTime(this.eval(params.imsak), times.imsak, 'ccw');
		var fajr    = this.sunAngleTime(this.eval(params.fajr), times.fajr, 'ccw');
		var sunrise = this.sunAngleTime(this.riseSetAngle(), times.sunrise, 'ccw');  
		var dhuhr   = this.midDay(times.dhuhr);
		var asr     = this.asrTime(this.asrFactor(params.asr), times.asr);
		var sunset  = this.sunAngleTime(this.riseSetAngle(), times.sunset);;
		var maghrib = this.sunAngleTime(this.eval(params.maghrib), times.maghrib);
		var isha    = this.sunAngleTime(this.eval(params.isha), times.isha);

		return {
			imsak: imsak, fajr: fajr, sunrise: sunrise, dhuhr: dhuhr, 
			asr: asr, sunset: sunset, maghrib: maghrib, isha: isha
		};
	},


	// compute prayer times 
	computeTimes: function() {
		// default times
		var times = { 
			imsak: 5, fajr: 5, sunrise: 6, dhuhr: 12, 
			asr: 13, sunset: 18, maghrib: 18, isha: 18
		};

		// main iterations
		for (var i=1 ; i<=numIterations ; i++) 
			times = this.computePrayerTimes(times);

		times = this.adjustTimes(times);
		
		// add midnight time
		times.midnight = (setting.midnight == 'Jafari') ? 
				times.sunset+ this.timeDiff(times.sunset, times.fajr)/ 2 :
				times.sunset+ this.timeDiff(times.sunset, times.sunrise)/ 2;

		times = this.tuneTimes(times);
		return this.modifyFormats(times);
	},


	// adjust times 
	adjustTimes: function(times) {
		var params = setting;
		for (var i in times)
			times[i] += timeZone- lng/ 15;
			
		if (params.highLats != 'None')
			times = this.adjustHighLats(times);
			
		if (this.isMin(params.imsak))
			times.imsak = times.fajr- this.eval(params.imsak)/ 60;
		if (this.isMin(params.maghrib))
			times.maghrib = times.sunset+ this.eval(params.maghrib)/ 60;
		if (this.isMin(params.isha))
			times.isha = times.maghrib+ this.eval(params.isha)/ 60;
		times.dhuhr += this.eval(params.dhuhr)/ 60; 

		return times;
	},


	// get asr shadow factor
	asrFactor: function(asrParam) {
		var factor = {Standard: 1, Hanafi: 2}[asrParam];
		return factor || this.eval(asrParam);
	},


	// return sun angle for sunset/sunrise
	riseSetAngle: function() {
		//var earthRad = 6371009; // in meters
		//var angle = DMath.arccos(earthRad/(earthRad+ elv));
		var angle = 0.0347* Math.sqrt(elv); // an approximation
		return 0.833+ angle;
	},


	// apply offsets to the times
	tuneTimes: function(times) {
		for (var i in times)
			times[i] += offset[i]/ 60; 
		return times;
	},


	// convert times to given time format
	modifyFormats: function(times) {
		for (var i in times)
			times[i] = this.getFormattedTime(times[i], timeFormat); 
		return times;
	},


	// adjust times for locations in higher latitudes
	adjustHighLats: function(times) {
		var params = setting;
		var nightTime = this.timeDiff(times.sunset, times.sunrise); 

		times.imsak = this.adjustHLTime(times.imsak, times.sunrise, this.eval(params.imsak), nightTime, 'ccw');
		times.fajr  = this.adjustHLTime(times.fajr, times.sunrise, this.eval(params.fajr), nightTime, 'ccw');
		times.isha  = this.adjustHLTime(times.isha, times.sunset, this.eval(params.isha), nightTime);
		times.maghrib = this.adjustHLTime(times.maghrib, times.sunset, this.eval(params.maghrib), nightTime);
		
		return times;
	},

	
	// adjust a time for higher latitudes
	adjustHLTime: function(time, base, angle, night, direction) {
		var portion = this.nightPortion(angle, night);
		var timeDiff = (direction == 'ccw') ? 
			this.timeDiff(time, base):
			this.timeDiff(base, time);
		if (isNaN(time) || timeDiff > portion) 
			time = base+ (direction == 'ccw' ? -portion : portion);
		return time;
	},

	
	// the night portion used for adjusting times in higher latitudes
	nightPortion: function(angle, night) {
		var method = setting.highLats;
		var portion = 1/2 // MidNight
		if (method == 'AngleBased')
			portion = 1/60* angle;
		if (method == 'OneSeventh')
			portion = 1/7;
		return portion* night;
	},


	// convert hours to day portions 
	dayPortion: function(times) {
		for (var i in times)
			times[i] /= 24;
		return times;
	},


	//---------------------- Time Zone Functions -----------------------


	// get local time zone
	getTimeZone: function(date) {
		var year = date[0];
		var t1 = this.gmtOffset([year, 0, 1]);
		var t2 = this.gmtOffset([year, 6, 1]);
		return Math.min(t1, t2);
	},

	
	// get daylight saving for a given date
	getDst: function(date) {
		return 1* (this.gmtOffset(date) != this.getTimeZone(date));
	},


	// GMT offset for a given date
	gmtOffset: function(date) {
		var localDate = new Date(date[0], date[1]- 1, date[2], 12, 0, 0, 0);
		var GMTString = localDate.toString();
		var GMTDate = new Date(GMTString.substring(0, GMTString.lastIndexOf(' ')- 1));
		var hoursDiff = (localDate- GMTDate) / (1000* 60* 60);
		return hoursDiff;
	},

	
	//---------------------- Misc Functions -----------------------

	// convert given string into a number
	eval: function(str) {
		return 1* (str+ '').split(/[^0-9.+-]/)[0];
	},


	// detect if input contains 'min'
	isMin: function(arg) {
		return (arg+ '').indexOf('min') != -1;
	},


	// compute the difference between two times 
	timeDiff: function(time1, time2) {
		return DMath.fixHour(time2- time1);
	},


	// add a leading 0 if necessary
	twoDigitsFormat: function(num) {
		return (num <10) ? '0'+ num : num;
	}
	
}}



//---------------------- Degree-Based Math Class -----------------------


var DMath = {

	dtr: function(d) { return (d * Math.PI) / 180.0; },
	rtd: function(r) { return (r * 180.0) / Math.PI; },

	sin: function(d) { return Math.sin(this.dtr(d)); },
	cos: function(d) { return Math.cos(this.dtr(d)); },
	tan: function(d) { return Math.tan(this.dtr(d)); },

	arcsin: function(d) { return this.rtd(Math.asin(d)); },
	arccos: function(d) { return this.rtd(Math.acos(d)); },
	arctan: function(d) { return this.rtd(Math.atan(d)); },

	arccot: function(x) { return this.rtd(Math.atan(1/x)); },
	arctan2: function(y, x) { return this.rtd(Math.atan2(y, x)); },

	fixAngle: function(a) { return this.fix(a, 360); },
	fixHour:  function(a) { return this.fix(a, 24 ); },

	fix: function(a, b) { 
		a = a- b* (Math.floor(a/ b));
		return (a < 0) ? a+ b : a;
	}
}


//---------------------- Init Object -----------------------


var prayTimes = new PrayTimes();

var PT = new PrayTimes('Makkah');
//prayer times for a week;
var times = PT.getTimes(new Date(), [21.4267, 39.8261], +2);
var times1 = PT.getTimes(new Date(new Date().getTime() + (24 * 60 * 60 * 1000)), [21.4267, 39.8261], +2);
var times2 = PT.getTimes(new Date(new Date().getTime() + (2*24 * 60 * 60 * 1000)), [21.4267, 39.8261], +2);
var times3 = PT.getTimes(new Date(new Date().getTime() + (3*24 * 60 * 60 * 1000)), [21.4267, 39.8261], +2);
var times4 = PT.getTimes(new Date(new Date().getTime() + (4*24 * 60 * 60 * 1000)), [21.4267, 39.8261], +2);
var times5 = PT.getTimes(new Date(new Date().getTime() + (5*24 * 60 * 60 * 1000)), [21.4267, 39.8261], +2);
var times6 = PT.getTimes(new Date(new Date().getTime() + (6*24 * 60 * 60 * 1000)), [21.4267, 39.8261], +2);

var fajr, sunrise, dhuhr, asr, maghrib, isha, fajr1;
var hDay, hMonth, hYear;

// Load fonts
require("Font7x11Numeric7Seg").add(Graphics);
require("Font8x16").add(Graphics);
// position on screen
const X = 190,
	Y = 165;
var counterInterval;

var exe ;

var countt=0;

function prayerInterface(h,m,hh){

    var minutesTime1 = (hh%12)*60+m;
    if (hh==12) { // for Dhuhr payer counter
        minutesTime1 = hh*60+m;
    }

    if (h < 10) {
        h="0"+h;  
    }

    if ( m < 10 ) {
        m = "0"+m;
    }
    var d = new Date();
    var time1 = (h)+ ":" + (m);

    function prayerTime(minutesTime1,x){
        var xxx=(minutesTime1 - x);
        if ( xxx <= 30 && xxx >=0 ){
            countt=0;
            return true;
        }
        else{
            return false;
        }
    }

    function toPrayerTime(minutesTime1,x){
        var xxxx=(x-minutesTime1);
        var xxxxh = Math.floor(xxxx / 60) ;
        var xxxxm = Math.floor(xxxx % 60) ;
        xxxx = ("0" + xxxxh).substr(-2) + ":" + ("0" + xxxxm).substr(-2);
        return xxxx;
    }


        function minutesPrayer(x){
        var xPrayer=Number(x.substring(0,2))*60+Number(x.substring(3));
        return xPrayer;
    }


    if( time1 >= sunrise && time1 < dhuhr && hh <= 12) {

        exe = false;

        if (minutesTime1 == minutesPrayer(sunrise) && d.getSeconds() == 0 ){
            //Bangle.buzz();
            //Bangle.beep(200, 4000);
            countt=0;
        }

        if (!exe) {
          countt=countt+1;
          if (countt==1){
              g.clearRect(0,180,240,240);
          }
          g.drawString("Duhur "+dhuhr, 120, 210);
          g.drawString("in "+toPrayerTime(minutesTime1,minutesPrayer(dhuhr)), 120, 238, true /*clear background*/ );
          return;
        }

        g.drawString("Sunrise "+sunrise, 120, 210, true /*clear background*/ );
        g.drawString((minutesTime1-minutesPrayer(sunrise))+" min ago", 120, 238, true /*clear background*/ );

    }

    else if(time1 < isha && time1 >= maghrib && hh > 12 ) {
        exe = prayerTime(minutesTime1,minutesPrayer(maghrib));

        if (minutesTime1 == minutesPrayer(maghrib) && d.getSeconds() == 0 ){
            Bangle.buzz();
            Bangle.beep(500, 4000);
        }

        if (!exe) {
          countt=countt+1;
          if (countt==1){
              g.clearRect(0,180,240,240);
          }
          g.drawString("Isha "+isha, 120, 210);
           g.drawString("in "+toPrayerTime(minutesTime1,minutesPrayer(isha)), 120, 238, true /*clear background*/ );
          return;
        }

        g.drawString("Maghrib "+maghrib, 120, 205, true /*clear background*/ );
        g.drawString((minutesTime1-minutesPrayer(maghrib))+" min ago", 120, 238, true /*clear background*/ );
    }

    else if(time1 >= asr && time1 < maghrib && hh > 12) {
        exe = prayerTime(minutesTime1,minutesPrayer(asr));

        if (minutesTime1 == minutesPrayer(asr) && d.getSeconds() == 0 ){
            Bangle.buzz();
            Bangle.beep(500, 4000);
        }

        if (!exe) {
          countt=countt+1;
          if (countt==1){
              g.clearRect(0,180,240,240);
          }
          g.drawString("Mgrib "+maghrib, 120, 205);
           g.drawString("in "+toPrayerTime(minutesTime1,minutesPrayer(maghrib)), 120, 238, true /*clear background*/ );
          return;
        }

        g.drawString("Asr "+asr, 120, 210, true /*clear background*/ );
        g.drawString((minutesTime1-minutesPrayer(asr))+" min ago", 120, 238, true /*clear background*/ );
    }

    else if( hh > 12 && time1 >= isha || (time1 < fajr &&  hh < 12)) {
        exe = prayerTime(minutesTime1,minutesPrayer(isha));

        if (minutesTime1 == minutesPrayer(isha) && d.getSeconds() == 0 ){
            Bangle.buzz();
            Bangle.beep(500, 4000);
        }

        if (!exe) {
          countt=countt+1;
          if (countt==1){
              g.clearRect(0,180,240,240);
          }
          if (hh>12 && hh<24){
            fajr = fajr1;
            minutesTime1 = -1 * ((12-(hh%12)-1)*60+(60-m));
          }
          if (hh==24){
            minutesTime1 = -1 * (((hh%12)-1)*60+(60-m));  // since hour 24 means 0 !!
          }
          g.drawString("Fajr "+fajr, 120, 205);
          g.drawString("in "+toPrayerTime(minutesTime1,minutesPrayer(fajr)), 120, 238, true /*clear background*/ );
          return;
        }

        g.drawString("Isha "+isha, 120, 210, true /*clear background*/ );
        g.drawString((minutesTime1-minutesPrayer(isha))+" min ago", 120, 238, true /*clear background*/ );
    }

    else if(time1 >= fajr && time1 < sunrise && hh < 12) {
        exe = prayerTime(minutesTime1,minutesPrayer(fajr));

        if (minutesTime1 == minutesPrayer(fajr) && d.getSeconds() == 0 ){
            Bangle.buzz();
            Bangle.beep(500, 4000);
        }

        if (!exe) {
          countt=countt+1;
          if (countt==1){
              g.clearRect(0,175,240,240);
          }
          g.drawString("Sunrise "+sunrise, 120, 210);
          g.drawString("in "+toPrayerTime(minutesTime1,minutesPrayer(sunrise)), 120, 238, true /*clear background*/ );
          return;
        }

        g.drawString("Fajr "+fajr, 120, 205, true /*clear background*/ );
        g.drawString((minutesTime1-minutesPrayer(fajr))+" min ago", 120, 238, true /*clear background*/ );
    }

    else{    //Asr prayer
        exe = prayerTime(minutesTime1,minutesPrayer(dhuhr));

        if (minutesTime1 == minutesPrayer(dhuhr) && d.getSeconds() == 0 ){
            Bangle.buzz();
            Bangle.beep(500, 4000);
        }

        if (!exe) {
          countt=countt+1;
          if (countt==1){
              g.clearRect(0,180,240,240);
          }
          if (hh==12){
            minutesTime1 = (hh%12)*60+m;
          }
          g.drawString("Asr "+asr, 120, 210);
          g.drawString("in "+toPrayerTime(minutesTime1,minutesPrayer(asr)), 120, 238, true /*clear background*/ );
          return;
        }

        g.drawString("Dhuhr "+dhuhr, 120, 210, true /*clear background*/ );
        g.drawString((minutesTime1-minutesPrayer(dhuhr))+" min ago", 120, 238, true /*clear background*/ );
    }
}

var toMenu = 0;

function todayPrayers(){

  backFromMenu=backFromMenu+1;
  g.setFontAlign(0, 1); // align center bottom
  g.setFont("8x16", 2);
  g.setColor(0,1,0);
  var d = new Date();
  var days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thurs', 'Fri', 'Sat'];
  var prayerArray = x10[(toMenu-1)];
  let text100 = hDate[(toMenu-1)];
  var hDateArray = text100.split(" ");
  g.drawString(days[(d.getDay()+(toMenu-1))%7]+" "+hDateArray[1]+"/"+hDateArray[2], 120, 55);
  g.drawString("Sunrise "+prayerArray[1], 120, 115);
  g.drawString("Asr       "+prayerArray[3], 120, 175);
  g.drawString("Isha      "+prayerArray[5], 120, 235);
  g.setColor(1,1,1);
  g.drawString("Fajr     "+prayerArray[0], 120, 85);
  g.drawString("Duhur    "+prayerArray[2], 120, 145);
  g.drawString("Mgrib     "+prayerArray[4], 120, 205);
  if (backFromMenu > 9){    //back after 9 sec
    toMenu= 0;
    g.clearRect(0,27,260,260);
    draw();
  }
  
}

var newDay= true;
var nextDay;
var hDate;
var x1 = [times.fajr, times.sunrise, times.dhuhr, times.asr, times.maghrib, times.isha];
var x2 = [times1.fajr, times1.sunrise, times1.dhuhr, times1.asr, times1.maghrib, times1.isha];
var x3 = [times2.fajr, times2.sunrise, times2.dhuhr, times2.asr, times2.maghrib, times2.isha];
var x4 = [times3.fajr, times3.sunrise, times3.dhuhr, times3.asr, times3.maghrib, times3.isha];
var x5 = [times4.fajr, times4.sunrise, times4.dhuhr, times4.asr, times4.maghrib, times4.isha];
var x6 = [times5.fajr, times5.sunrise, times5.dhuhr, times5.asr, times5.maghrib, times5.isha];
var x7 = [times6.fajr, times6.sunrise, times6.dhuhr, times6.asr, times6.maghrib, times6.isha];
var x10 = [x1, x2, x3, x4, x5, x6, x7];

function convert24hto12h(x){
  let z = Number(x.substring(0,2))%12;
  if (z==0) return x;
  z = "0"+ z + ":" + x.substring(3);
  return z;
}


function draw() {

  if (toMenu > 0) {
    return todayPrayers();
  }

  var d = new Date();
  var day = d.getDay();
  var day1 = convertDate(d);
  var year = d.getFullYear();


  if ((day-nextDay)!=0) {
    newDay= true;
    load("athanCalculation.app.js");
  }

  if (newDay) {

    hDate = lookupTable2022(day1, year);
    let text = hDate[0];
    var myArray = text.split(" ");
    hDay = myArray[1];
    hMonth = myArray[2];
    hYear = myArray[3];
    fajr = x1[0];
    sunrise = x1[1];
    dhuhr = convert24hto12h(x1[2]);
    asr = convert24hto12h(x1[3]);
    maghrib = convert24hto12h(x1[4]);
    isha = convert24hto12h(x1[5]);

    //for next fajr
    fajr1 = x2[0];

    newDay= false;
    nextDay = day;
  }

  var h = d.getHours(),
		m = d.getMinutes();
  var hh;
  if (h==0){
    h=24;
  }
  if ( h > 12 ){
    if (h==24){
      h=12;
      hh=24;
    }
    else{
      hh = h;
      h = h % 12;
    }
  }
  else{
    hh=h;
  }

  var time = (" " + h).substr(-2) + ":" + ("0" + m).substr(-2);
    // Reset the state of the graphics library
  g.reset();
    // draw the current time (6x size 7 segment)
  g.setFont("7x11Numeric7Seg", 6);
  g.setFontAlign(1, 1); // align right bottom
  g.drawString(time, X, Y, true /*clear background*/ );
  // draw the seconds (3x size 7 segment)
  g.setFont("7x11Numeric7Seg", 3);
  g.drawString(("0" + d.getSeconds()).substr(-2), X + 40, Y, true /*clear background*/ );
  // draw the date, in a normal font
  g.setFontAlign(0, 1); // align center bottom
  g.setFont("8x16", 2);
  g.drawString(hDay+"/"+hMonth+"/"+hYear+" H", 120, 60, true /*clear background*/ );
  var gMonth = d.getMonth()+1;
  if (gMonth < 10){
    gMonth = "0"+gMonth;  
  }

  g.drawString(d.getDate()+"/"+(gMonth)+"/"+d.getFullYear()+" G", 120, 90);

  prayerInterface(h,m,hh);

}

var backFromMenu;
setWatch(() => {

  g.clearRect(0,27,260,260);
  toMenu = toMenu+1;
  if (toMenu == 8){
    toMenu = 0;  
  } 
  backFromMenu=0;
  draw();

}, BTN1, {repeat:true});

setWatch(() => {

  g.clearRect(0,27,260,260);
  if (toMenu > 0){
    toMenu = toMenu-1;  
  }
  backFromMenu=0;
  draw();

}, BTN2, {repeat:true});

setWatch(() => {
 
Bangle.showLauncher();

}, BTN3, {repeat:true});




// Clear the screen once, at startup
g.clear();
// draw immediately at first
draw();
var secondInterval = setInterval(draw, 1000);
// Stop updates when LCD is off, restart when on
Bangle.on('lcdPower', on => {
	if(secondInterval) clearInterval(secondInterval);
	secondInterval = undefined;
	if(on) {
		secondInterval = setInterval(draw, 1000);
    g.clearRect(0,27,260,260);
		draw(); // draw immediately
	}
});
// Load widgets
Bangle.loadWidgets();
Bangle.drawWidgets();
